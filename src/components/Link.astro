---
interface CommonProps extends astroHTML.JSX.AnchorHTMLAttributes {
  url: string
  event?: string
}

interface PropsWithText extends CommonProps {
  text: string
  children?: never
}

interface PropsWithChildren extends CommonProps {
  children: any
  text?: never
}

export type Props = PropsWithText | PropsWithChildren;

const { url, text, event, ...props } = Astro.props;

type AnchorProps = astroHTML.JSX.AnchorHTMLAttributes;

const externalUrlProps: AnchorProps = {
  target: '_blank',
  rel: 'noopener'
};

const isExternalUrl = url.startsWith('https://') || !!event;
---

<a
  href={url}
  {...(isExternalUrl ? externalUrlProps : {})}
  {...props}
  data-event={event || undefined}
><slot>{text}</slot></a>

<script>
  const linkRegistry: [HTMLAnchorElement, () => void][] = [];

  function register() {
    console.log('Registered event handler');

    // Can't use Umami's built-in data attribute as it ignores _blank links
    document.querySelectorAll('a[data-event]').forEach((elem) => {
      const link = elem as HTMLAnchorElement;
      const event = link.dataset.event;
      const isExternal = link.target === '_blank';
      if (!event || !isExternal) return;

      const fn = () => {
        if ('umami' in window) {
          // @ts-ignore
          umami.track(event);
        }
      }
      
      link.addEventListener('click', fn);
      linkRegistry.push([link, fn]);
    });
  }

  /*document.addEventListener('astro:before-swap', () => {
    linkRegistry.forEach(([link, fn]) => {
      link.removeEventListener('click', fn);
    });

    linkRegistry.splice(0, linkRegistry.length);
  });

  document.addEventListener('astro:page-load', register);*/
  register();
</script>
